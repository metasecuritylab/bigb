# !/usr/bin/env python
# dev: suwonchon(suwonchon@gmail.com)

from jira import JIRA, JIRAError
import libConfig
import requests
import libUtils
import logging
logging.getLogger().setLevel(logging.ERROR)

JIRA_URL = libConfig.GetConfig('JIRA', 'URL')
USER = libConfig.GetConfig('JIRA', 'USER')
PASS = libConfig.GetConfig('JIRA', 'PASS')
PROJ = libConfig.GetConfig('JIRA', 'PROJECT')
EXCEPTIP = libConfig.GetConfig('JIRA', 'EXCLUDEDIP')

FlagTimeout = 1
FlagWarnings = False

def CheckJIRA():
    url = '{}'.format(JIRA_URL)
    try:
        res = requests.get(url, timeout=1)
        if res.status_code == 200:
            return True
    except:
        return False

    return False

def ConnJIRA():
    try:
        jira = JIRA(server=JIRA_URL, basic_auth=(USER, PASS), timeout=FlagTimeout)
        return jira
    except:
        pass

    return None

def GetDescIssue(Key):
    jira = ConnJIRA()
    if jira:
        issue = jira.issue(Key)
        summary = issue.fields.summary
        desc = issue.fields.description
    else:
        return ''

    return desc

def GetExcludedIP():
    ExcludedIP = []
    jira = ConnJIRA()
    if jira:
        issue = jira.issue(EXCEPTIP)
        desc = issue.fields.description
    else:
        return ExcludedIP

    str = desc.split('|')
    for ip in str:
        if libUtils.IsValidIPv4Addr(ip.strip()):
            ExcludedIP.append(ip.strip())

    return ExcludedIP

def CreateIssue(summary, desc):
    # Project, IssueType, Summary, Attachment, DueDate, Description, Assignee,
    # Priority, Labels, Original Estimate, Remaining Estimate

    issue_dict = {
        'project': {'key': PROJ},
        'summary': summary,
        'description': desc,
        'issuetype': {'name': 'Task'},
        'duedate': '2021-09-18'
    }

    jira = ConnJIRA()
    if jira:
        jira.create_issue(fields=issue_dict)
    else:
        return False

    return True

def UpdateIssue(Key):
    import time
    now = time.localtime()
    ts = "%04d/%02d/%02d %02d:%02d:%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour,
                                              now.tm_min, now.tm_sec)
    desc = "This issue is generated by soar on {}".format(ts)
    summary = "New issue for soar"

    issue_dict = {
        'summary': summary,
        'description': desc,
        'assignee' : {'name': "schon"},
    }

    jira = ConnJIRA()
    if jira:
        issue = jira.issue(Key)
        issue.update(fields=issue_dict)
    else:
        return False

    return True

def GetWatcher(Key):
    ret = {}
    jira = ConnJIRA()
    if jira:
        issue = jira.issue(Key)
        watcher = jira.watchers(issue)
        for i in watcher.watchers:
            ret[i.name] = i.emailAddress
    else:
        return ret

    return ret

def SetWatcher(Key, Watchers):
    if not Watchers:
        return False

    jira = ConnJIRA()
    if jira:
        issue = jira.issue(Key)
        for w in Watchers:
            try:
                jira.add_watcher(issue, w)
            except:
                return False
    else:
        return False

    return True

def UnitTest():
    ret = CheckJIRA()
    if ret:
        text = '[UnitTest:libJira:CheckJIRA] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:libJira:CheckJIRA] FAIL : {}'.format(ret)
    print(text)

    IssueKey = "SOAR-1"
    ret = GetDescIssue(IssueKey)
    if len(ret):
        text = '[UnitTest:libJira:GetDescIssue] SUCCESS : {}'.format(len(ret))
    else:
        text = '[UnitTest:libJira:GetDescIssue] FAIL : {}'.format(len(ret))
    print(text)

    ret = GetExcludedIP()
    if len(ret) == 32:
        text = '[UnitTest:libJira:GetExcludedIP] SUCCESS : {}'.format(len(ret))
    else:
        text = '[UnitTest:libJira:GetExcludedIP] FAIL : {}'.format(len(ret))
    print(text)

    Key = "ISWT-531"
    ret = UpdateIssue(Key)
    if ret:
        text = '[UnitTest:libJira:UpdateIssue] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:libJira:UpdateIssue] FAIL : {}'.format(ret)
    print(text)

    Key = "ISWT-531"
    ret = GetWatcher(Key)
    if len(ret):
        text = '[UnitTest:libJira:GetWatcher] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:libJira:GetWatcher] FAIL : {}'.format(ret)
    print(text)

    Key = "ISWT-531"
    Watchers = ['suwonchon']
    ret = SetWatcher(Key, Watchers)
    if ret:
        text = '[UnitTest:libJira:SetWatcher] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:libJira:SetWatcher] FAIL : {}'.format(ret)
    print(text)


    '''
    desc = "it's a test for creating issue in jira"
    summary = "New issue for soar"
    ret = CreateIssue(summary, desc)
    if ret:
        text = '[UnitTest:libJira:CreateIssue] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:libJira:CreateIssue] FAIL : {}'.format(ret)
    print(text)
    '''