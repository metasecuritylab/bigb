# !/usr/bin/env python
# dev: suwonchon(suwonchon@gmail.com)

from jira import JIRA, JIRAError
import libConfig
import requests

JIRA_URL = libConfig.GetConfig('JIRA', 'URL')
USER = libConfig.GetConfig('JIRA', 'USER')
PASS = libConfig.GetConfig('JIRA', 'PASS')
PROJ = libConfig.GetConfig('JIRA', 'PROJECT')

jira = JIRA(server=JIRA_URL, basic_auth=(USER, PASS))

def ReviewIssue(Key):
    try:
        issue = jira.issue(Key)
        summary = issue.fields.summary
    except JIRAError as e:
        #print(e.status_code, e.text)
        return False

    return True

def CreateIssue(summary, desc):
    # Project, IssueType, Summary, Attachment, DueDate, Description, Assignee,
    # Priority, Labels, Original Estimate, Remaining Estimate

    issue_dict = {
        'project': {'key': PROJ},
        'summary': summary,
        'description': desc,
        'issuetype': {'name': 'Task'},
        'duedate': '2021-09-18'
    }

    jira.create_issue(fields=issue_dict)
    return True

def UpdateIssue(Key):
    desc = "This issue is generated by soar"
    summary = "New issue for soar"

    issue_dict = {
        'summary': summary,
        'description': desc,
        'assignee' : {'name': "schon"},
    }

    issue = jira.issue(Key)
    try:
        issue.update(fields=issue_dict)
    except JIRAError as e:
        return False

    return True
    
def AddWatcher(Key):
    watcher='suwonchon'

    issue = jira.issue(Key)
    watcher = jira.watchers(issue)
    """
    for watcher in watcher.watchers:
        print(watcher)
        print(watcher.emailAddress)
    """
    watcher='userid'
    try:
        jira.add_watcher(issue, watcher)
    except JIRAError as e:
        return False

    return True

def CheckJIRA():

    url = '{}'.format(JIRA_URL)

    try:
        res = requests.get(url)
        if res.status_code == 200:
            return True
    except:
        return False

    return False

def UnitTest():
    ret = CheckJIRA()
    if ret:
        text = '[UnitTest:LibJIRA:CheckJIRA] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:LibJIRA:CheckJIRA] FAIL : {}'.format(ret)
    print(text)

    IssueKey = "ISWT-2"
    ret = ReviewIssue(IssueKey)
    if ret:
        text = '[UnitTest:LibJIRA:ReviewIssue] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:LibJIRA:ReviewIssue] FAIL : {}'.format(ret)
    print(text)

    desc = "it's a test for creating issue in jira"
    summary = "New issue for soar"
    # ret = CreateIssue(summary, desc)
    # print(ret)

    Key = "ISWT-531"
    ret = UpdateIssue(Key)
    if ret:
        text = '[UnitTest:LibJIRA:UpdateIssue] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:LibJIRA:UpdateIssue] FAIL : {}'.format(ret)
    print(text)

    ret = AddWatcher(Key)
    if ret:
        text = '[UnitTest:LibJIRA:AddWatcher] SUCCESS : {}'.format(ret)
    else:
        text = '[UnitTest:LibJIRA:AddWatcher] FAIL : {}'.format(ret)
    print(text)